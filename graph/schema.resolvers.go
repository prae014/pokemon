package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"
	"fmt"

	"github.com/prae014/pokemon/graph/model"
)

func AddType(pokemonTypeInput []*model.PokemonTypeInput) (pokemonType []*model.PokemonType) {
	var pt []*model.PokemonType

	for _, type_input := range pokemonTypeInput {
		t := model.PokemonType{
			Name: type_input.Name,
		}
		pt = append(pt, &t)
	}
	return pt
}

func AddAbility(pokemonAbilityInput []*model.PokemonAbilityInput) (pokemonAbility []*model.PokemonAbility) {
	var pa []*model.PokemonAbility

	for _, ability_input := range pokemonAbilityInput {
		a := model.PokemonAbility{
			Name: ability_input.Name,
		}
		pa = append(pa, &a)
	}
	return pa
}

// CreatePokemon is the resolver for the createPokemon field.
func (r *mutationResolver) CreatePokemon(ctx context.Context, input model.PokemonInput) (*model.Pokemon, error) {

	new_pkmn := model.Pokemon{
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        AddType(input.Type),
		Abilities:   AddAbility(input.Abilities),
	}

	//add to database
	err := r.DB.Create(&new_pkmn).Error
	if err != nil {
		return nil, err
	}

	return &new_pkmn, nil
}

// UpdatePokemon is the resolver for the updatePokemon field.
func (r *mutationResolver) UpdatePokemon(ctx context.Context, id int, input model.PokemonInput) (*model.Pokemon, error) {
	//first check if ID exists or not
	var poke model.Pokemon
	p := r.DB.First(&poke, id)
	if p.Error != nil {
		return nil, p.Error
	}

	updated_poke := model.Pokemon{
		ID:          id,
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        AddType(input.Type),
		Abilities:   AddAbility(input.Abilities),
	}
	err := r.DB.Save(&updated_poke).Error

	if err != nil {
		return nil, err
	}
	return &updated_poke, nil
}

// DeletePokemon is the resolver for the deletePokemon field.
func (r *mutationResolver) DeletePokemon(ctx context.Context, id int) (bool, error) {
	p := r.DB.Delete(&model.Pokemon{}, id)
	if p.RowsAffected < 1 {
		fmt.Printf("numbers of row affected: %v\n", p.RowsAffected)
		err := errors.New("the provided id doesn't exist")
		return false, err
	}
	return true, nil
}

// Pokemons is the resolver for the pokemons field.
func (r *queryResolver) Pokemons(ctx context.Context) ([]*model.Pokemon, error) {
	var all_poke []*model.Pokemon
	err := r.DB.Preload("Type").Preload("Abilities").Find(&all_poke).Error

	if err != nil {
		return nil, err
	}

	return all_poke, nil
}

// PokemonID is the resolver for the pokemonID field.
func (r *queryResolver) PokemonID(ctx context.Context, id int) (*model.Pokemon, error) {
	var poke model.Pokemon
	err := r.DB.First(&poke, id).Preload("Type").Preload("Abilities").Error

	if err != nil {
		return nil, err
	}
	return &poke, nil

}

// PokemonName is the resolver for the pokemonName field.
func (r *queryResolver) PokemonName(ctx context.Context, name string) (*model.Pokemon, error) {
	var poke model.Pokemon
	err := r.DB.Where("name = ?", name).Preload("Type").Preload("Abilities").Find(&poke).Error

	if err != nil {
		return nil, err
	}
	return &poke, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
